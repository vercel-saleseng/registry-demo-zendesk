{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dashboard",
  "type": "registry:component",
  "title": "Dashboard",
  "description": "A complete dashboard implementation with sidebar, stats cards, charts, and tables.",
  "registryDependencies": [
    "https://registry-demo-zendesk.vercel.app/r/start.json"
  ],
  "files": [
    {
      "path": "app/(garden)/dashboard/page.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Grid, Row, Col } from \"@zendeskgarden/react-grid\";\nimport {\n  Table,\n  Head,\n  HeaderRow,\n  HeaderCell,\n  Body,\n  Row as TableRow,\n  Cell,\n} from \"@zendeskgarden/react-tables\";\nimport { Tabs, TabList, Tab, TabPanel } from \"@zendeskgarden/react-tabs\";\nimport {\n  BarChart3,\n  Home,\n  Users,\n  ShoppingCart,\n  Settings,\n  Bell,\n  Search,\n  ChevronDown,\n  HelpCircle,\n  LogOut,\n  Layers,\n  TrendingUp,\n  DollarSign,\n  ShoppingBag,\n  Clock,\n  User,\n  MoreHorizontal,\n} from \"lucide-react\";\n\n// Navigation items\nconst navItems = [\n  { icon: Home, label: \"Dashboard\" },\n  { icon: Users, label: \"Customers\" },\n  { icon: ShoppingCart, label: \"Orders\" },\n  { icon: BarChart3, label: \"Analytics\" },\n  { icon: Settings, label: \"Settings\" },\n];\n\n// Dropdown menu items\nconst userMenuItems = [\n  { label: \"Profile\", icon: User },\n  { label: \"Settings\", icon: Settings },\n  { label: \"Help & Support\", icon: HelpCircle },\n  { label: \"Logout\", icon: LogOut, className: \"text-red-500\" },\n];\n\n// Sample data for table\nconst tableData = [\n  {\n    id: 1,\n    customer: \"John Doe\",\n    product: \"Premium Plan\",\n    date: \"2023-05-08\",\n    status: \"Completed\",\n    amount: \"$120.00\",\n  },\n  {\n    id: 2,\n    customer: \"Jane Smith\",\n    product: \"Basic Plan\",\n    date: \"2023-05-07\",\n    status: \"Pending\",\n    amount: \"$59.99\",\n  },\n  {\n    id: 3,\n    customer: \"Robert Johnson\",\n    product: \"Enterprise Plan\",\n    date: \"2023-05-06\",\n    status: \"Completed\",\n    amount: \"$299.99\",\n  },\n  {\n    id: 4,\n    customer: \"Emily Davis\",\n    product: \"Premium Plan\",\n    date: \"2023-05-05\",\n    status: \"Failed\",\n    amount: \"$120.00\",\n  },\n  {\n    id: 5,\n    customer: \"Michael Wilson\",\n    product: \"Basic Plan\",\n    date: \"2023-05-04\",\n    status: \"Completed\",\n    amount: \"$59.99\",\n  },\n];\n\n// Chart data\nconst revenueData = [\n  { name: \"Jan\", revenue: 4000, profit: 2400, expenses: 1600 },\n  { name: \"Feb\", revenue: 3000, profit: 1600, expenses: 1400 },\n  { name: \"Mar\", revenue: 6000, profit: 3200, expenses: 2800 },\n  { name: \"Apr\", revenue: 8000, profit: 4800, expenses: 3200 },\n  { name: \"May\", revenue: 5000, profit: 2800, expenses: 2200 },\n  { name: \"Jun\", revenue: 9000, profit: 5400, expenses: 3600 },\n  { name: \"Jul\", revenue: 11000, profit: 6600, expenses: 4400 },\n];\n\nconst salesCategoryData = [\n  { name: \"Electronics\", value: 4000 },\n  { name: \"Clothing\", value: 3000 },\n  { name: \"Home\", value: 2000 },\n  { name: \"Beauty\", value: 2780 },\n  { name: \"Sports\", value: 1890 },\n  { name: \"Books\", value: 2390 },\n];\n\nconst ordersData = [\n  { name: \"Jan\", orders: 120, returns: 8 },\n  { name: \"Feb\", orders: 145, returns: 12 },\n  { name: \"Mar\", orders: 190, returns: 15 },\n  { name: \"Apr\", orders: 210, returns: 18 },\n  { name: \"May\", orders: 180, returns: 14 },\n  { name: \"Jun\", orders: 230, returns: 20 },\n  { name: \"Jul\", orders: 250, returns: 22 },\n];\n\nconst customerData = [\n  { name: \"Jan\", total: 1200, active: 800, new: 120 },\n  { name: \"Feb\", total: 1320, active: 850, new: 145 },\n  { name: \"Mar\", total: 1465, active: 900, new: 190 },\n  { name: \"Apr\", total: 1655, active: 950, new: 210 },\n  { name: \"May\", total: 1865, active: 1000, new: 180 },\n  { name: \"Jun\", total: 2045, active: 1100, new: 230 },\n  { name: \"Jul\", total: 2275, active: 1200, new: 250 },\n];\n\nexport default function Dashboard() {\n  const [selectedTab, setSelectedTab] = useState(\"overview\");\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const [activeNavItem, setActiveNavItem] = useState(0);\n  const [userMenuOpen, setUserMenuOpen] = useState(false);\n\n  return (\n    <div className=\"flex h-screen w-full bg-gray-50\">\n      {/* Sidebar - Custom implementation */}\n      <div\n        className={`bg-white shadow-md transition-all duration-300 ${sidebarOpen ? \"w-64\" : \"w-20\"}`}\n      >\n        <div className=\"p-4 flex items-center justify-between border-b\">\n          <div className=\"flex items-center\">\n            <Layers className=\"text-blue-600\" size={24} />\n            {sidebarOpen && (\n              <span className=\"ml-2 font-bold text-lg\">Dashboard</span>\n            )}\n          </div>\n          <button\n            onClick={() => setSidebarOpen(!sidebarOpen)}\n            className=\"p-1 rounded-full hover:bg-gray-100\"\n          >\n            <ChevronDown\n              className={`transform ${sidebarOpen ? \"rotate-0\" : \"rotate-180\"}`}\n              size={18}\n            />\n          </button>\n        </div>\n\n        {/* Custom navigation menu */}\n        <div className=\"p-2\">\n          {navItems.map((item, index) => (\n            <button\n              key={index}\n              className={`w-full mb-1 p-2 rounded flex items-center ${\n                activeNavItem === index\n                  ? \"bg-blue-50 text-blue-600\"\n                  : \"hover:bg-gray-100\"\n              }`}\n              onClick={() => setActiveNavItem(index)}\n            >\n              <item.icon\n                size={20}\n                className={\n                  activeNavItem === index ? \"text-blue-600\" : \"text-gray-600\"\n                }\n              />\n              {sidebarOpen && <span className=\"ml-3\">{item.label}</span>}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-auto\">\n        {/* Header */}\n        <header className=\"bg-white shadow-sm p-4 flex justify-between items-center\">\n          <div className=\"relative w-64\">\n            <Search\n              className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\n              size={18}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              className=\"w-full pl-10 pr-4 py-2 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <button className=\"p-2 rounded-full hover:bg-gray-100 relative\">\n              <Bell size={20} />\n              <span className=\"absolute top-0 right-0 w-2 h-2 bg-red-500 rounded-full\"></span>\n            </button>\n\n            {/* Custom dropdown implementation instead of Zendesk Garden Dropdown */}\n            <div className=\"relative\">\n              <button\n                className=\"flex items-center space-x-2 p-2 rounded-md hover:bg-gray-100 focus:outline-none\"\n                onClick={() => setUserMenuOpen(!userMenuOpen)}\n              >\n                <div className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center\">\n                  <User size={16} className=\"text-gray-600\" />\n                </div>\n                <span className=\"ml-2\">Admin User</span>\n                <ChevronDown\n                  size={16}\n                  className={userMenuOpen ? \"transform rotate-180\" : \"\"}\n                />\n              </button>\n\n              {userMenuOpen && (\n                <div className=\"absolute right-0 mt-1 w-56 bg-white rounded-md shadow-lg z-10 border\">\n                  <div className=\"py-1\">\n                    {userMenuItems.map((item, index) => (\n                      <button\n                        key={index}\n                        className={`flex items-center w-full px-4 py-2 text-sm text-left hover:bg-gray-100 ${item.className || \"\"}`}\n                        onClick={() => setUserMenuOpen(false)}\n                      >\n                        <item.icon size={16} className=\"mr-2\" />\n                        {item.label}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <div className=\"p-6\">\n          <h1 className=\"text-2xl font-bold mb-6\">Dashboard Overview</h1>\n\n          {/* Stats Cards */}\n          <Grid>\n            <Row className=\"gap-4\">\n              <Col sm={6} md={3}>\n                <div className=\"bg-white p-4 rounded-lg shadow-sm mb-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Total Revenue</p>\n                      <h3 className=\"text-2xl font-bold\">$24,560</h3>\n                      <p className=\"text-xs text-green-500 flex items-center mt-1\">\n                        <TrendingUp size={14} className=\"mr-1\" /> +2.5% from\n                        last month\n                      </p>\n                    </div>\n                    <div className=\"p-3 bg-blue-100 rounded-full\">\n                      <DollarSign size={24} className=\"text-blue-600\" />\n                    </div>\n                  </div>\n                </div>\n              </Col>\n              <Col sm={6} md={3}>\n                <div className=\"bg-white p-4 rounded-lg shadow-sm mb-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Total Orders</p>\n                      <h3 className=\"text-2xl font-bold\">1,245</h3>\n                      <p className=\"text-xs text-green-500 flex items-center mt-1\">\n                        <TrendingUp size={14} className=\"mr-1\" /> +15% from last\n                        month\n                      </p>\n                    </div>\n                    <div className=\"p-3 bg-green-100 rounded-full\">\n                      <ShoppingBag size={24} className=\"text-green-600\" />\n                    </div>\n                  </div>\n                </div>\n              </Col>\n              <Col sm={6} md={3}>\n                <div className=\"bg-white p-4 rounded-lg shadow-sm mb-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Total Customers</p>\n                      <h3 className=\"text-2xl font-bold\">5,678</h3>\n                      <p className=\"text-xs text-green-500 flex items-center mt-1\">\n                        <TrendingUp size={14} className=\"mr-1\" /> +8% from last\n                        month\n                      </p>\n                    </div>\n                    <div className=\"p-3 bg-purple-100 rounded-full\">\n                      <Users size={24} className=\"text-purple-600\" />\n                    </div>\n                  </div>\n                </div>\n              </Col>\n              <Col sm={6} md={3}>\n                <div className=\"bg-white p-4 rounded-lg shadow-sm mb-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Avg. Order Value</p>\n                      <h3 className=\"text-2xl font-bold\">$86.40</h3>\n                      <p className=\"text-xs text-red-500 flex items-center mt-1\">\n                        <TrendingUp\n                          size={14}\n                          className=\"mr-1 transform rotate-180\"\n                        />{\" \"}\n                        -1.2% from last month\n                      </p>\n                    </div>\n                    <div className=\"p-3 bg-orange-100 rounded-full\">\n                      <Clock size={24} className=\"text-orange-600\" />\n                    </div>\n                  </div>\n                </div>\n              </Col>\n            </Row>\n          </Grid>\n\n          {/* Charts */}\n          <Tabs selectedItem={selectedTab} onChange={setSelectedTab}>\n            <TabList>\n              <Tab item=\"overview\">Overview</Tab>\n              <Tab item=\"sales\">Sales</Tab>\n              <Tab item=\"customers\">Customers</Tab>\n            </TabList>\n            <TabPanel item=\"overview\" className=\"pt-4\">\n              <div className=\"flex flex-col space-y-6\">\n                {/* First row of charts */}\n                <div className=\"flex flex-col md:flex-row gap-6\">\n                  <div className=\"w-full md:w-1/2 bg-white p-4 rounded-lg shadow-sm\">\n                    <h3 className=\"text-lg font-semibold mb-4\">\n                      Revenue Overview\n                    </h3>\n                    <div className=\"h-80\">\n                      <div className=\"w-full h-full\">\n                        <svg className=\"w-full h-full\">\n                          <g transform=\"translate(40,20)\">\n                            {/* X and Y axes */}\n                            <line\n                              x1=\"0\"\n                              y1=\"0\"\n                              x2=\"0\"\n                              y2=\"240\"\n                              stroke=\"#e2e8f0\"\n                              strokeWidth=\"1\"\n                            />\n                            <line\n                              x1=\"0\"\n                              y1=\"240\"\n                              x2=\"500\"\n                              y2=\"240\"\n                              stroke=\"#e2e8f0\"\n                              strokeWidth=\"1\"\n                            />\n\n                            {/* X-axis labels */}\n                            {revenueData.map((d, i) => (\n                              <text\n                                key={i}\n                                x={i * (500 / (revenueData.length - 1))}\n                                y=\"260\"\n                                textAnchor=\"middle\"\n                                fontSize=\"12\"\n                                fill=\"#64748b\"\n                              >\n                                {d.name}\n                              </text>\n                            ))}\n\n                            {/* Y-axis labels */}\n                            {[0, 4000, 8000, 12000].map((value, i) => (\n                              <text\n                                key={i}\n                                x=\"-10\"\n                                y={240 - (value / 12000) * 240}\n                                textAnchor=\"end\"\n                                fontSize=\"12\"\n                                fill=\"#64748b\"\n                                dominantBaseline=\"middle\"\n                              >\n                                ${value}\n                              </text>\n                            ))}\n\n                            {/* Revenue line */}\n                            <path\n                              d={`M${revenueData.map((d, i) => `${i * (500 / (revenueData.length - 1))},${240 - (d.revenue / 12000) * 240}`).join(\" L\")}`}\n                              fill=\"none\"\n                              stroke=\"#3182ce\"\n                              strokeWidth=\"2\"\n                            />\n\n                            {/* Revenue data points */}\n                            {revenueData.map((d, i) => (\n                              <circle\n                                key={i}\n                                cx={i * (500 / (revenueData.length - 1))}\n                                cy={240 - (d.revenue / 12000) * 240}\n                                r=\"4\"\n                                fill=\"#3182ce\"\n                              />\n                            ))}\n\n                            {/* Profit line */}\n                            <path\n                              d={`M${revenueData.map((d, i) => `${i * (500 / (revenueData.length - 1))},${240 - (d.profit / 12000) * 240}`).join(\" L\")}`}\n                              fill=\"none\"\n                              stroke=\"#38a169\"\n                              strokeWidth=\"2\"\n                            />\n\n                            {/* Profit data points */}\n                            {revenueData.map((d, i) => (\n                              <circle\n                                key={i}\n                                cx={i * (500 / (revenueData.length - 1))}\n                                cy={240 - (d.profit / 12000) * 240}\n                                r=\"4\"\n                                fill=\"#38a169\"\n                              />\n                            ))}\n\n                            {/* Legend */}\n                            <rect\n                              x=\"350\"\n                              y=\"10\"\n                              width=\"12\"\n                              height=\"12\"\n                              fill=\"#3182ce\"\n                            />\n                            <text x=\"370\" y=\"20\" fontSize=\"12\" fill=\"#64748b\">\n                              Revenue\n                            </text>\n                            <rect\n                              x=\"350\"\n                              y=\"30\"\n                              width=\"12\"\n                              height=\"12\"\n                              fill=\"#38a169\"\n                            />\n                            <text x=\"370\" y=\"40\" fontSize=\"12\" fill=\"#64748b\">\n                              Profit\n                            </text>\n                          </g>\n                        </svg>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"w-full md:w-1/2 bg-white p-4 rounded-lg shadow-sm\">\n                    <h3 className=\"text-lg font-semibold mb-4\">\n                      Sales by Category\n                    </h3>\n                    <div className=\"h-80\">\n                      <div className=\"w-full h-full\">\n                        <svg className=\"w-full h-full\">\n                          <g transform=\"translate(40,20)\">\n                            {/* X and Y axes */}\n                            <line\n                              x1=\"0\"\n                              y1=\"0\"\n                              x2=\"0\"\n                              y2=\"240\"\n                              stroke=\"#e2e8f0\"\n                              strokeWidth=\"1\"\n                            />\n                            <line\n                              x1=\"0\"\n                              y1=\"240\"\n                              x2=\"500\"\n                              y2=\"240\"\n                              stroke=\"#e2e8f0\"\n                              strokeWidth=\"1\"\n                            />\n\n                            {/* Bars */}\n                            {salesCategoryData.map((d, i) => (\n                              <g key={i}>\n                                <rect\n                                  x={i * (500 / salesCategoryData.length) + 10}\n                                  y={240 - (d.value / 4000) * 240}\n                                  width={500 / salesCategoryData.length - 20}\n                                  height={(d.value / 4000) * 240}\n                                  fill=\"#3182ce\"\n                                  rx=\"4\"\n                                />\n                                <text\n                                  x={\n                                    i * (500 / salesCategoryData.length) +\n                                    500 / salesCategoryData.length / 2\n                                  }\n                                  y=\"260\"\n                                  textAnchor=\"middle\"\n                                  fontSize=\"12\"\n                                  fill=\"#64748b\"\n                                >\n                                  {d.name}\n                                </text>\n                              </g>\n                            ))}\n\n                            {/* Y-axis labels */}\n                            {[0, 1000, 2000, 3000, 4000].map((value, i) => (\n                              <text\n                                key={i}\n                                x=\"-10\"\n                                y={240 - (value / 4000) * 240}\n                                textAnchor=\"end\"\n                                fontSize=\"12\"\n                                fill=\"#64748b\"\n                                dominantBaseline=\"middle\"\n                              >\n                                ${value}\n                              </text>\n                            ))}\n                          </g>\n                        </svg>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Second row of charts */}\n                <div className=\"flex flex-col md:flex-row gap-6\">\n                  <div className=\"w-full md:w-1/2 bg-white p-4 rounded-lg shadow-sm\">\n                    <h3 className=\"text-lg font-semibold mb-4\">\n                      Monthly Orders\n                    </h3>\n                    <div className=\"h-80\">\n                      <div className=\"w-full h-full\">\n                        <svg className=\"w-full h-full\">\n                          <g transform=\"translate(40,20)\">\n                            {/* X and Y axes */}\n                            <line\n                              x1=\"0\"\n                              y1=\"0\"\n                              x2=\"0\"\n                              y2=\"240\"\n                              stroke=\"#e2e8f0\"\n                              strokeWidth=\"1\"\n                            />\n                            <line\n                              x1=\"0\"\n                              y1=\"240\"\n                              x2=\"500\"\n                              y2=\"240\"\n                              stroke=\"#e2e8f0\"\n                              strokeWidth=\"1\"\n                            />\n\n                            {/* Bars */}\n                            {ordersData.map((d, i) => (\n                              <g key={i}>\n                                <rect\n                                  x={i * (500 / ordersData.length) + 10}\n                                  y={240 - (d.orders / 250) * 240}\n                                  width={500 / ordersData.length - 20}\n                                  height={(d.orders / 250) * 240}\n                                  fill=\"#38b2ac\"\n                                  rx=\"4\"\n                                />\n                                <text\n                                  x={\n                                    i * (500 / ordersData.length) +\n                                    500 / ordersData.length / 2\n                                  }\n                                  y=\"260\"\n                                  textAnchor=\"middle\"\n                                  fontSize=\"12\"\n                                  fill=\"#64748b\"\n                                >\n                                  {d.name}\n                                </text>\n                              </g>\n                            ))}\n\n                            {/* Y-axis labels */}\n                            {[0, 50, 100, 150, 200, 250].map((value, i) => (\n                              <text\n                                key={i}\n                                x=\"-10\"\n                                y={240 - (value / 250) * 240}\n                                textAnchor=\"end\"\n                                fontSize=\"12\"\n                                fill=\"#64748b\"\n                                dominantBaseline=\"middle\"\n                              >\n                                {value}\n                              </text>\n                            ))}\n\n                            {/* Legend */}\n                            <rect\n                              x=\"350\"\n                              y=\"10\"\n                              width=\"12\"\n                              height=\"12\"\n                              fill=\"#38b2ac\"\n                            />\n                            <text x=\"370\" y=\"20\" fontSize=\"12\" fill=\"#64748b\">\n                              Orders\n                            </text>\n                          </g>\n                        </svg>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"w-full md:w-1/2 bg-white p-4 rounded-lg shadow-sm\">\n                    <h3 className=\"text-lg font-semibold mb-4\">\n                      Customer Growth\n                    </h3>\n                    <div className=\"h-80\">\n                      <div className=\"w-full h-full\">\n                        <svg className=\"w-full h-full\">\n                          <g transform=\"translate(40,20)\">\n                            {/* X and Y axes */}\n                            <line\n                              x1=\"0\"\n                              y1=\"0\"\n                              x2=\"0\"\n                              y2=\"240\"\n                              stroke=\"#e2e8f0\"\n                              strokeWidth=\"1\"\n                            />\n                            <line\n                              x1=\"0\"\n                              y1=\"240\"\n                              x2=\"500\"\n                              y2=\"240\"\n                              stroke=\"#e2e8f0\"\n                              strokeWidth=\"1\"\n                            />\n\n                            {/* X-axis labels */}\n                            {customerData.map((d, i) => (\n                              <text\n                                key={i}\n                                x={i * (500 / (customerData.length - 1))}\n                                y=\"260\"\n                                textAnchor=\"middle\"\n                                fontSize=\"12\"\n                                fill=\"#64748b\"\n                              >\n                                {d.name}\n                              </text>\n                            ))}\n\n                            {/* Y-axis labels */}\n                            {[0, 500, 1000, 1500, 2000, 2500].map(\n                              (value, i) => (\n                                <text\n                                  key={i}\n                                  x=\"-10\"\n                                  y={240 - (value / 2500) * 240}\n                                  textAnchor=\"end\"\n                                  fontSize=\"12\"\n                                  fill=\"#64748b\"\n                                  dominantBaseline=\"middle\"\n                                >\n                                  {value}\n                                </text>\n                              ),\n                            )}\n\n                            {/* Total customers line */}\n                            <path\n                              d={`M${customerData.map((d, i) => `${i * (500 / (customerData.length - 1))},${240 - (d.total / 2500) * 240}`).join(\" L\")}`}\n                              fill=\"none\"\n                              stroke=\"#805ad5\"\n                              strokeWidth=\"2\"\n                            />\n\n                            {/* Total customers data points */}\n                            {customerData.map((d, i) => (\n                              <circle\n                                key={i}\n                                cx={i * (500 / (customerData.length - 1))}\n                                cy={240 - (d.total / 2500) * 240}\n                                r=\"4\"\n                                fill=\"#805ad5\"\n                              />\n                            ))}\n\n                            {/* Active customers line */}\n                            <path\n                              d={`M${customerData.map((d, i) => `${i * (500 / (customerData.length - 1))},${240 - (d.active / 2500) * 240}`).join(\" L\")}`}\n                              fill=\"none\"\n                              stroke=\"#38a169\"\n                              strokeWidth=\"2\"\n                            />\n\n                            {/* Active customers data points */}\n                            {customerData.map((d, i) => (\n                              <circle\n                                key={i}\n                                cx={i * (500 / (customerData.length - 1))}\n                                cy={240 - (d.active / 2500) * 240}\n                                r=\"4\"\n                                fill=\"#38a169\"\n                              />\n                            ))}\n\n                            {/* Legend */}\n                            <rect\n                              x=\"350\"\n                              y=\"10\"\n                              width=\"12\"\n                              height=\"12\"\n                              fill=\"#805ad5\"\n                            />\n                            <text x=\"370\" y=\"20\" fontSize=\"12\" fill=\"#64748b\">\n                              Total\n                            </text>\n                            <rect\n                              x=\"350\"\n                              y=\"30\"\n                              width=\"12\"\n                              height=\"12\"\n                              fill=\"#38a169\"\n                            />\n                            <text x=\"370\" y=\"40\" fontSize=\"12\" fill=\"#64748b\">\n                              Active\n                            </text>\n                          </g>\n                        </svg>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabPanel>\n            <TabPanel item=\"sales\" className=\"pt-4\">\n              <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n                <h3 className=\"text-lg font-semibold mb-4\">Sales Data</h3>\n                <p>Sales content goes here</p>\n              </div>\n            </TabPanel>\n            <TabPanel item=\"customers\" className=\"pt-4\">\n              <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n                <h3 className=\"text-lg font-semibold mb-4\">Customer Data</h3>\n                <p>Customer content goes here</p>\n              </div>\n            </TabPanel>\n          </Tabs>\n\n          {/* Recent Transactions Table */}\n          <div className=\"bg-white p-4 rounded-lg shadow-sm mt-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-semibold\">Recent Transactions</h3>\n              <button className=\"text-blue-600 text-sm hover:underline\">\n                View All\n              </button>\n            </div>\n            <Table>\n              <Head>\n                <HeaderRow>\n                  <HeaderCell>ID</HeaderCell>\n                  <HeaderCell>Customer</HeaderCell>\n                  <HeaderCell>Product</HeaderCell>\n                  <HeaderCell>Date</HeaderCell>\n                  <HeaderCell>Status</HeaderCell>\n                  <HeaderCell>Amount</HeaderCell>\n                  <HeaderCell>Actions</HeaderCell>\n                </HeaderRow>\n              </Head>\n              <Body>\n                {tableData.map((row) => (\n                  <TableRow key={row.id}>\n                    <Cell>#{row.id}</Cell>\n                    <Cell>{row.customer}</Cell>\n                    <Cell>{row.product}</Cell>\n                    <Cell>{row.date}</Cell>\n                    <Cell>\n                      <span\n                        className={`px-2 py-1 rounded-full text-xs ${\n                          row.status === \"Completed\"\n                            ? \"bg-green-100 text-green-800\"\n                            : row.status === \"Pending\"\n                              ? \"bg-yellow-100 text-yellow-800\"\n                              : \"bg-red-100 text-red-800\"\n                        }`}\n                      >\n                        {row.status}\n                      </span>\n                    </Cell>\n                    <Cell>{row.amount}</Cell>\n                    <Cell>\n                      <button className=\"p-1 rounded-full hover:bg-gray-100\">\n                        <MoreHorizontal size={16} />\n                      </button>\n                    </Cell>\n                  </TableRow>\n                ))}\n              </Body>\n            </Table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/dashboard/page.tsx"
    }
  ]
}